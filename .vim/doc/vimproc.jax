*vimproc.txt*	Vim用非同期実行ライブラリ

Version: 4.3
Author : Shougo <Shougo.Matsu@gmail.com>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS					*vimproc-contents*

Introduction		|vimproc-introduction|
Install			|vimproc-install|
Interface		|vimproc-interface|
  Functions		  |vimproc-functions|
  Variables		  |vimproc-variables|
Examples		|vimproc-examples|
ToDo			|vimproc-todo|
Bugs			|vimproc-bugs|
Changelog		|vimproc-changelog|

==============================================================================
INTRODUCTION					*vimproc-introduction*

|vimproc|とはYukihiro Nakadairaさんが開発し、現在私が保守作業を行っている、
優れた非同期実行ライブラリです。
|vimproc|では外部のシェルを使わず、外部DLLを用いて非同期実行処理を実装しています。
Python等の外部インタフェースを使う場合と比較して、マルチスレッド化はできませんが、
安定性に優れ、外部のインタプリタのバージョンに依存しません。

==============================================================================
INSTALL						*vimproc-install*

まず、vimprocをリポジトリから取ってきます。
[http://github.com/Shougo/vimproc/tree/master](http://github.com/Shougo/vimproc/tree/master)

そして外部ライブラリである、proc.so(proc.dll)をmakeします。
vimprocはproc.so(proc.dll)の機能に依存しているので、proc.so(proc.dll)が存在しないとエラーになります。
Cygwinでコンパイルしたproc.dllはCygwin上のVim専用です。WindowsのVimでは使えません。注意してください。

Make方法
* Mingw: >
	$ make -f make_mingw.mak

* Mac OS X: >
	$ make -f make_mac.mak

* Linux BSD: >
	$ make -f make_gcc.mak

* Visual Studio: >
	$ make -f make_msvc.mak

* Cygwin: >
	$ make -f make_cygwin.mak

コンパイルが通ったら、autoloadにあるproc.vimとproc.so(proc.dll)を.vimの
autoloadディレクトリにコピーします。 doc/にあるのはヘルプファイルです。
Windowsユーザーでコンパイルするのが嫌な場合は、githubのダウンロードに
32bit版のproc.dllファイルがあります。ただし動作の保証はしません。
http://github.com/Shougo/vimproc/downloads

vimshell#parser系の関数は引数のパースに|vimshell|のルーチンを使用します。
よって、|vimshell|がインストールされていない場合は動作しないので注意してください。

==============================================================================
INTERFACE					*vimproc-interface*

------------------------------------------------------------------------------
FUNCTIONS 					*vimproc-functions*

vimproc#version()				*vimproc#version()*
		vimprocのバージョン番号を文字列形式で返す。vimproc Ver.4未満
		には存在しない。番号は|v:version|のように、メジャーバージョ
		ン * 100 + マイナーバージョンという形式になっている。Ver.4な
		らば400である。 Ver.4.1なら401である。

vimproc#open({filename})			*vimproc#open()*
		{filename}をシステムに関連付けられたコマンドで開く。

vimproc#get_command_name({command} [, {path}, {count}])	*vimproc#get_command_name()*
		{command}を{path}から検索し、本当の名前を返す。 {path}を省略
		すると、$PATHが代わりに使用される。{count}を指定すると、
		{count}番目の候補が返る。{count}に-1を指定すると、結果はリス
		トになる。

vimproc#system({expr} [, {input}, {timeout}])	*vimproc#system()*
		標準の|system()|を置き換えるための関数。 Windows上で
		|system()|を使用すると、DOS窓が出てきてしまう。
		|vimproc#system()|ではそのようなことはない。 ただしシェルを
		起動しないので、シェルの内部コマンドは動作しない。 リダイレ
		クトも動かない。 リダイレクトについては、今後実装予定がある。
		引数は|vimproc#plineopen3()|と同じだが、引数に文字列を渡した場合、
		|vimshell|の関数を用いて引数をパースする。|vimshell|がインス
		トールされていない場合は、|system()|が呼び出される。引数の最
		後に&を付けると、コマンドをバックグラウンドで実行する。
		{timeout}を指定すると、一定時間ブロックした場合、プロセスを
		強制的に終了する。単位はミリ秒である。この機能には|+reltime|
		が必要となる。省略すると、0を指定したことになり無視される。
		内部で浮動小数点演算をしているため、Vim 7.2以上でないと動作
		しない。

vimproc#system_bg({expr})			*vimproc#system_bg()*
		|vimproc#parser#system()|と同様だが、コマンドをバックグラウ
		ンドで実行する。入力はできない。

vimproc#parser#system({expr} [, {input}, {timeout}])	*vimproc#parser#system()*
		標準の|system()|を置き換えるための関数。|vimshell|の関数を用
		いて引数をパースする。|vimshell|がインス トールされていない
		場合は、|system()|が呼び出される。引数の最後に&を付けると、
		コマンドをバックグラウンドで実行する。

vimproc#parser#system_bg({expr})		*vimproc#parser#system_bg()*
		|vimproc#parser#system()|と同様だが、コマンドをバックグラウンドで実行する。
		入力はできない。

vimproc#get_last_status()			*vimproc#get_last_status()*
		前回の|vimproc#system()|の実行において得られた、戻り値を取得する。

vimproc#get_last_errmsg()			*vimproc#get_last_errmsg()*
		前回の|vimproc#system()|の実行において、標準エラー出力に出力された
		エラーメッセージを取得する。

vimproc#fopen({path}, {flags} [, {mode}])	*vimproc#fopen()*
		{path}で指定されるファイルを開く。
		{flags}には各種のフラグを文字列形式で指定する。

vimproc#socket_open({host}, {port})		*vimproc#socket_open()*
		{host}, {port}で指定されるソケットをオープンし、オブジェクトを返す。

vimproc#popen2({args})				*vimproc#popen2()*
		{args}で指定されるコマンド列を実行し、プロセス情報を返す。
		引数に文字列を指定すると、コマンドは|vimshell|によってパースされる。

vimproc#plineopen2({cmdline})			*vimproc#plineopen2()*
		{cmdline}で指定されるコマンド列を実行し、プロセス情報を返す。
		引数に文字列を指定すると、コマンドは|vimshell|によってパースされる。
		パイプも解釈される。

vimproc#popen3({args})				*vimproc#popen3()*
		{args}で指定されるコマンド列を実行し、プロセス情報を返す。
		引数に文字列を指定すると、コマンドは|vimshell|によってパースされる。

vimproc#plineopen3({commands})			*vimproc#plineopen3()*
		{commands}で指定されるコマンド列を実行し、プロセス情報を返す。
		引数に文字列を指定すると、コマンドは|vimshell|によってパースされる。
		パイプも解釈される。

vimproc#pgroup_open({commands})			*vimproc#pgroup_open()*
		{commands}で指定されるコマンド列を実行し、プロセス情報を返す。
		引数に文字列を指定すると、コマンドは|vimshell|によってパースされる。
		パイプの他に、; && ||も解釈される。

vimproc#ptyopen({args})				*vimproc#ptyopen()*
		{args}で指定されるコマンド列を実行し、プロセス情報を返す。
		引数に文字列を指定すると、コマンドは|vimshell|によってパースされる。
		パイプは解釈されない。

vimproc#kill({pid}, {sig})			*vimproc#kill()*
		{pid}で指定されるプロセスに対し、{sig}のシグナルを送信する。

------------------------------------------------------------------------------
VARIABLES 					*vimproc-variables*

						*g:vimproc_dll_path*
g:vimproc_dll_path		(default Win32 or Cygwin : "$VIMRUNTIME/autoload/proc.dll"
					others: "$VIMRUNTIME/autoload/proc.so")
		vimprocが利用する動的ライブラリである、proc.soまたはproc.dll
		へのパス を指定する。ライブラリはあらかじめコンパイルしてお
		かなければならない。このファイルが存在しないとエラーになる。

==============================================================================
EXAMPLES					*vimproc-examples*
>
	" File open test.
	let file = vimproc#fopen("./test1.vim", "O_RDONLY", 0)
	let res = file.read()
	call file.close()
	new
	call append(0, split(res, '\r\n\|\r\|\n'))
	
	" Pipe open test.
	let sub = vimproc#parser#popen2('ls')
	let res = ''
	while !sub.stdout.eof
	let res .= sub.stdout.read()
	endwhile
	let [cond, status] = sub.waitpid()
	new
	call append(0, split(res, '\r\n\|\r\|\n') + [string([cond, status])])
	
	" Socket open test.
	let sock = vimproc#socket_open('www.yahoo.com', 80)
	call sock.write("GET / HTTP/1.0\r\n\r\n")
	let res = ''
	while !sock.eof
	let res .= sock.read()
	endwhile
	call sock.close()
	new
	call append(0, split(res, '\r\n\|\r\|\n'))
<
==============================================================================
TODO						*vimproc-todo*

==============================================================================
BUGS						*vimproc-bugs*

==============================================================================
CHANGELOG					*vimproc-changelog*

2010-08-23
- Revised documentation.
- Call parser automatically.
- Fixed parser bug.

2010-08-18
- Fixed pgroup error.

2010-08-17
- Ver.4.3.
- Improved vimproc#system().
- Implemented vimproc#pgroup_open().
- Improved vimproc#get_command_name().

2010-08-15
- Improved timeout.

2010-08-02
- Fixed vimproc#system_bg().
- Fixed suffixesadd error.

2010-07-26
- Fixed document.

2010-07-23
- Ver.4.2.
- Implemented timeout.
- Improved kill.
- Fixed executable() check.
- Fixed timeout.

2010-07-22
- Fixed vimshell check.

2010-07-16
- Improved vimshell check.
- Improved pipeline parser.

2010-07-13
- Fixed error message.

2010-07-12
- Improved vimshell check.

2010-07-05
- Fixed shebang.

2010-07-04
- Don't use CREATE_NO_WINDOW.
- Implemented get_winsize() and set_winsize().

2010-07-02
- Close pipes when waitpid().
- Close pipes when kill().
- Close when system().
- Improved close.

2010-07-01
- Set mergin.

2010-06-27
- Fixed shebang for Mac OS X.

2010-06-25
- Fixed resolve() error.
- Ignore garbage collect error.
- Restore pty_open().

2010-06-24
- Resolve symbolic link.
- Improved shebang.
- Fixed executable() bug.

2010-06-22
- Fixed vimproc#get_command_name() bug.

2010-06-21
- Improved vimshell check.
- Check dll file.

2010-06-20
- Added vimproc#open() and vimproc#get_command_name().
- Improved command search.
- Improved vimproc#get_command_name().
- Analyse shebang line.
- Improved vimproc#version().
- Fixed Visual C++ link error.
- Fixed warning.
- Fixed help.

2010-06-16
- Started version 4.1 development.
- Implemented vp_pty_open in Windows.
- Improved vp_kill in Windows.
- Changed vimproc#open() as vimproc#fopen().

ChangeLog 4.0/*{{{*/
2010-06-11
- Improved help file.
- Improved vimproc#version().

2010-06-07
- Fixed documentation typo.

2010-05-29
- Fixed man permission error.

2010-05-25
- Optimized autocmd.

2010-05-24
- Implemented background execution(Testing).
- Added new test.

2010-05-22
- Improved executable search.

2010-05-05
- Fixed encoding bug.

2010-05-04
- Fixed help tags.

2010-05-02
- Increased VP_ARGC_MAX.
- Revised error messages.

2010-05-01
- Fixed warning.

2010-04-27
- Implemented dummy declaration.

2010-04-25
- Use vimshell parser.

2010-04-24
- Fixed error.

2010-04-20
- Ver.4 development is started.
- Implemented vimproc#version().
- Splited parser.
/*}}}*/
ChangeLog 1.20-3.01{{{
2010-03-17
    * Fixed s:split_pipe() bug.
    * Marked as ver.3.01.

2010-02-25
    * Fixed Cygwin Makefile.
    * Fixed for Cygwin.
    * Supported Cygwin platform.

2010-02-20
    * Added Cygwin Makefile.

2010-02-17
    * Fixed modifier parse bug.

2010-02-15
    * Improved argument parse in vimproc#system.
    * Fixed vimproc#socket_open() error.
    * Improved close.
    * Test revised.
    * Added vimproc#kill() function.

2010-01-14
    * Deleted convert encoding in vimproc#system.
    * Use popen3 in vimproc#system.
    * Implemented vimproc#get_last_errmsg().

2010-01-04
    * Added g:vimproc_dll_path option.

2009-12-30
    * Fixed Makefile.
    * Improved Windows pty support.

2009-12-25
    * Fixed Makefile.
    * Newline convert.
    * vimproc#system supported input.
    * Implemented vimproc#get_last_status() instead of v:shell_error.

2009-12-22
    * Implemented Windows pty.
    * Supported MinGW.

2009-12-17
    * Reimplemented vimproc.vim.
    * Changed tests.

2009-11-11
    * Resolve shortcut filename.

2009-11-06
    * Fixed command search bug on Windows.

2009-09-09
    * Mark as ver.1.22.
    * Use forkpty().
    
    * Modified for Mac OS X(Thanks Nico!).

2009-07-09
    * Mark as ver.1.21.
    
    * Fixed pty_open() bug in Linux.

2009-07-08
    * Mark as ver.1.20.
    
    * Modified for Mac OS X(Thanks splhack!).
}}}

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:fdm=marker:
